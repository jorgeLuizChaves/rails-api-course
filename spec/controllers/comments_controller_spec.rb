require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CommentsController, type: :controller do

  # describe "GET #show" do
  #   it "returns a success response" do
  #     comment = Comment.create! valid_attributes
  #     get :show, params: {id: comment.to_param}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end

  let(:user) { create :user }
  let(:access_token) { create :access_token }
  let(:article) { create :article }
  let(:comment) { create :comment, user: user, article: article }

  let(:valid_attributes) do
      {
          data: {
              attributes: {
                  content: "content",
              }
          }
      }
  end

  describe "#create" do

    subject {post :create, params: valid_attributes.merge(article_id: article.id ) }

    context 'when no code provided' do
      it_behaves_like 'forbidden_access'
    end

    context 'when code is provided' do
      before { request.headers['Authorization'] = "Bearer #{access_token.token}"}

      it 'should return status code 201' do
        subject
        expect(response).to have_http_status :created
      end

      it 'should return proper json' do
        subject
        expect(json_data['attributes']).to include({
          "content" => "content"
        })
      end

    end
  end

  describe "#show" do
    let(:user) { create :user}
    let(:article) { create :article, user: user }


    subject { get :index, params: {article_id: article.id, page: 1, per_page: 10} }

    it "should return proper status code 200" do
      subject
      expect(response).to have_http_status :ok
    end

    it 'should return proper json' do
      comment_1 = create :comment, article: article, user: user
      comment_2 = create :comment, article: article, user: user
      comments = [comment_1, comment_2]
      subject
      comments.each_with_index do |comment, index|
      expect(json_data[index]['attributes']).to include({
           "content" => comment.content
       })

      expect(json_data.count).to eq(comments.count)
      end

      # expect(json_data).to include()
    end
  end
end
